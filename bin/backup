#!/bin/bash
# Adapted from Alberto Alcolea's backup script:
# https://github.com/albertoalcolea/dotfiles/blob/master/bin/bin/backup

set -eo pipefail

opts=("-a" "--stats" "-h" "--hard-links")
usage=$(cat <<-END
Usage:
  backup [options]
Create full and incremental backups with rsync.
Options:
      --src=PATH          specify a source path
      --dest=PATH         specify a destination path
      --link-dest=PATH    specify a link destination path (for the rsync --link-dest option)
  -f, --filter=FILE       add a filter file in rsync format (+ include, - exclude, etc.)
  -b, --full-backup       force a full backup instead of an incremental backup
  -n, --dry-run           perform a trial run without actually copying files
  -v, --verbose           run rsync in verbose mode
  -h, --help              show this help
END
)

# Args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --src)
      src="$2"
      shift
      shift
      ;;
    --dest)
      dest="$2"
      shift
      shift
      ;;
    --link-dest)
      link_dest="$2"
      shift
      shift
      ;;
    -f|--filter)
      filter="$2"
      shift
      shift
      ;;
    -b|--full-backup)
      do_full_backup="true"
      shift
      ;;
    -n|--dry-run)
      opts+=("-n")  # rsync dry-run option
      shift
      ;;
    -v|--verbose)
      use_verbose_mode="true"
      opts+=("-v")  # rsync verbose flag
      shift
      ;;
    -h|--help)
      echo "$usage"
      exit 0
      ;;
    *) # Unknown option
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Exit if missing vital arguments
if [ -z "$src" ] || [ -z "$dest" ]; then
  echo "--src and --dest options are mandatory"
  exit 1
fi

# Remove trailing slashes
src=$(echo "$src" | sed -e 's|\(.*\)/$|\1|')
dest=$(echo "$dest" | sed -e 's|\(.*\)/$|\1|')
link_dest=$(echo "$link_dest" | sed -e 's|\(.*\)/$|\1|')

# Add filter file
if [ -f "$filter" ]; then
  opts+=(--filter="merge $filter")
fi

# Creating full or incremental backup
if [ "$do_full_backup" == "true" ]; then
  echo "Creating full backup ..."
else
  if [ -z "$link_dest" ]; then
    echo "No previous backup found. Creating initial backup ..."
  else
    opts+=("--link-dest=$link_dest")
    echo "Basing incremental backup on $link_dest"
  fi
fi

# Print command
echo Executing: rsync "${opts[@]}" "$src/" "$dest/"
rsync "${opts[@]}" "$src/" "$dest/"
